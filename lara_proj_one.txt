1> First --> (yield, extends, section)

1. command --> php artisan   --> Tell you about the all the command in laravel 
2. Create folder in view layouts > app.blade.php 
3. Create folder in view posts > index.blade.php 
4. Use @yield('content') in app.blade.php 
5. In index.blade.php use -->
  @extends('layouts.app') to get the code form the layout > app.blade.php file 
6. To send data from app file to  index.blade.php yield function
   @section('content')  ........... @endsection
7. Add a posts route for post.index file 

2> Second --> (tailwindcss install, asset, up, down)

1. Now install tailwind -->
  command --> npm install tailwindcss 
  command --> npm install    --> to run package.json which have 'laravel-mix' dependency, which is used to pull tailwind
  in laravel project also we will be able to use 'dev' command from package.json file 
  command --> npm run dev   --> it will add css > app.css and js > app.js files in public folder
2. All is manage by webpack.mix.js file in it add -->
  require('tailwindcss')
  Add base, component, utilities from tailwind doc and add in resources > css > app.css 
  now run 
  command --> npm run dev
3. In public > css > app.css have all the tailwind code 
4. Now link the app.css in posts>index file using 'asset' helper
5. Now add Navbar with tailwind classes in app.blade.php -->
 body with 'bg-gray-200', nav with 'p-6 bg-white flex justify-between mb-6', ul with 'flex items-center' , li, a with 'p-3'
  (home, dashboard, post) Another ul, li, a (name, login, register, logout)
6. Now add content in posts>index.blade.php with tailwindcss
  in section div with 'flex justify-center', div with 'w-8/12 bg-white p-6 rounded-lg' (post)     
7. Now in migration files with 'up' and 'down' method 
8. Add db connection name in .env file 
9. command --> php aritsan migrate   

3> Third --> (create_column_migration, route(), password_confirmation)

1. Migration To create column in the table
   command --> php artisan make:migration add_username_to_user_table 
   --> can also specify --table= or --create to specify the table you are making migration 
2. In migration file for up method --> $table->string('username')
3. In down method $table->dropColumn('username')
4. command --> php artisan migrate:rollback --> to rollback last migration
5. Create register controller in Auth\RegisterController 
6. Make 'index' method there and return view 'auth.register'
7. Define this controller method in route file.
8. Make the view Auth > 'register.blade.php' copy the content of 'post.blade.php' to this file with change class w-4/12 
to w-8/12  
9. Add named route {{ route('register') }} in navbar
10. Make a form inside divs --> form add route 'register' in action 
11. For inputs --> div with mb-4, label for=name with sr-only, input with 'bg-gray-100 border-2 w-full p-4 rounded-lg'
12. Add similar intput for username, email, password 
13. Add another input 'Password' again for it name is 'password_confirmation'  
14. For Register button div, button with 'bg-blue-500 text-white px-4 py-3 rounded font-medium w-full' type='submit'
15. Make a post route for RegisterController with 'store' method with no named route it will inherit the get route
 named route.

4> Forth --> (@csrf, dd, validate(confirm), @error, old, create);

1. Add '@csrf' token in form 
2. Make 'store' method in which check 'dd' method 
3. Now use validate method which exist in Controller > BaseController > ValidateRequests > validate 
4. $this->validate($request, ['name'=> 'required|max:255'])
5. Other rules --> email, for password --> 'confirmed', this confirm is matched with 'password_confirmation'
6. Validate method throw exeption when not true 
7. To add error in view file -->
    @error('name')  div with text-red-500 mt-2 text-sm   {{ $message }} @enderror
    Same type error can be shown in-line is well 
8. Add {{ old('') }} in all input fields 
9. Now store data in database using User model -->
    User::create()
10. For create method we need to defined protected '$fillabe = [..., 'username']' in User Model      

5> Fifth  --> (Hash, Facades, redirect, auth()->user(), auth()->attemp(), $request->only(), @auth, @guest)

1. now send data in create function.
2. Use Hash::make('') facade in to hash password
3. Facades are 'front of underline funcitonality, shortcut to accessing function'
5. Add controller and route for dashboard page with index method and named route 
6. auth()->user()  --> auth helper returns the current signed in User model 
7. To signed user in use --> auth()->attempt($request->only('email','password'))
8. To check this is working check in controller --> 'dd(auth()->user())'  -->
   If it is returning current user object 'auth()->attemp()' is working fine.
9. Now redirect user to page --> return redirect()->route('dashboard')
10. Paste post > index code in 'dashboard' view
11. To check auth()->user() in blade files in app.blade.php -->
    can use --> @if(auth()->user()) name, logout    @else  login, register    @endif 
12. We can use @auth @endauth and @guest @endguest 
13. Now Create Auth\LoginController 
14. Also create get and post route for it 
15. Create function with view('auth.login') 
16. Copy paste code from register to login with only email and password
17. Add login action in form with store method in controller    

6> Sixth --> (with, session('status'), auth()->logout(), back(), middleware, authenticate class, middleware in constructor,
middleware with only)

1. Add same code for login controller as in register controller with some changes
2. This time need to check the auth()->attempt() method in if statement to send user to route
3. also add error -->  return back()->with('status','status here')
4. To get this in view use --> @if(session('status')) session('status')  @endif
5. Now for logout create logout controller and route 
6. Add these route in navbar
7. To logout --> auth()->logout(); and return redirect()->back('home');
8. create route for home with only function
9. create home view and copy code 
10. Add logout button in navbar in form with post method with @csrf and type="submit" wiht form class 'inline p-3'
11. Define post route for it 
12. Now add route middleware in route
13. We will use 'auth' middleware from karnel.php file which is equal to the Authenticate class which is in the 
middleware folder and has method authenticate to check user is signed in or not otherwise it will call 'unathenticated'
method which throw 'Authenticate exception'
14. We can change the redirect route in Authenticate class 
15. To apply in single route ->middleware('auth')
16. Can also define it in Controller like DashboardController in constructor method-->
      $this->middleware(['auth'])
17. If only have to apply in some method we can use $this->middleware(['auth'])->only      




